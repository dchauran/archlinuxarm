
This hack makes sure that DB has Theme setting present.
Originally - when user launch first time frontend - only small
subset of setting in DB are populated. (i.e. DB Theme setting is not
created)
MiniMyth2 is state-less - so uses Theme downloaded at every boot &
for user error resiliency - sets this downloaded Theme name in 
frontend DB.
When DB has no setting "Theme" (i.e. user never changed from MythTV
default "MediaCenter" theme) - MiniMyth2 can't change theme name setting 
in DB as DB has no Theme setting.

This patch makes sure DB has setting Theme - so MiniMyth2 can modify
it to user preference expressed in minimyth.conf


diff --speed-large-files --no-dereference --minimal -Naur mythtv-c516faf2e8bc94a7fa95fafcfa88d0a1aa0ab60b/mythtv/programs/mythfrontend/mythfrontend.cpp mythtv-c516faf2e8bc94a7fa95fafcfa88d0a1aa0ab60b/mythtv/programs/mythfrontend/mythfrontend.cpp
--- mythtv-c516faf2e8bc94a7fa95fafcfa88d0a1aa0ab60b/mythtv/programs/mythfrontend/mythfrontend.cpp	2022-03-17 13:45:04.890545120 +0100
+++ mythtv-c516faf2e8bc94a7fa95fafcfa88d0a1aa0ab60b/mythtv/programs/mythfrontend/mythfrontend.cpp	2022-03-17 13:42:36.250540218 +0100
@@ -2029,6 +2029,9 @@
 
     fe_sd_notify("STATUS=Loading themes");
     QString themename = gCoreContext->GetSetting("Theme", DEFAULT_UI_THEME);
+    //hack to creating Theme DB setting when it not exists (i.e. first frontend launch)
+    if (themename == DEFAULT_UI_THEME)
+        gCoreContext->SaveSetting("Theme", DEFAULT_UI_THEME);
 
     QString themedir = GetMythUI()->FindThemeDir(themename);
     if (themedir.isEmpty())
